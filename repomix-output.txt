This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-04T00:18:28.780Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
Discord/
  Assets.xcassets/
    AccentColor.colorset/
      Contents.json
    AppIcon.appiconset/
      Contents.json
    Contents.json
    Info.plist
  Preview Content/
    Preview Assets.xcassets/
      Contents.json
  ContentView.swift
  Discord.entitlements
  DiscordApp.swift
  DiscordWindowContent.swift
  Info.plist
  SecondaryWindowController.swift
  WebView.swift
Discord.xcodeproj/
  project.xcworkspace/
    xcshareddata/
      WorkspaceSettings.xcsettings
    xcuserdata/
      austin.xcuserdatad/
        IDEFindNavigatorScopes.plist
      nicojaffer.xcuserdatad/
        WorkspaceSettings.xcsettings
    contents.xcworkspacedata
  xcshareddata/
    xcschemes/
      Discord.xcscheme
  xcuserdata/
    austin.xcuserdatad/
      xcdebugger/
        Breakpoints_v2.xcbkptlist
      xcschemes/
        xcschememanagement.plist
    nicojaffer.xcuserdatad/
      xcdebugger/
        Breakpoints_v2.xcbkptlist
      xcschemes/
        xcschememanagement.plist
  project.pbxproj
Discord.entitlements
FUNDING.yml
Info.plist
README.md

================================================================
Repository Files
================================================================

================
File: Discord/Assets.xcassets/AccentColor.colorset/Contents.json
================
{
  "colors" : [
    {
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: Discord/Assets.xcassets/AppIcon.appiconset/Contents.json
================
{
  "images" : [
    {
      "idiom" : "mac",
      "scale" : "1x",
      "size" : "16x16"
    },
    {
      "idiom" : "mac",
      "scale" : "2x",
      "size" : "16x16"
    },
    {
      "idiom" : "mac",
      "scale" : "1x",
      "size" : "32x32"
    },
    {
      "idiom" : "mac",
      "scale" : "2x",
      "size" : "32x32"
    },
    {
      "idiom" : "mac",
      "scale" : "1x",
      "size" : "128x128"
    },
    {
      "idiom" : "mac",
      "scale" : "2x",
      "size" : "128x128"
    },
    {
      "idiom" : "mac",
      "scale" : "1x",
      "size" : "256x256"
    },
    {
      "idiom" : "mac",
      "scale" : "2x",
      "size" : "256x256"
    },
    {
      "idiom" : "mac",
      "scale" : "1x",
      "size" : "512x512"
    },
    {
      "idiom" : "mac",
      "scale" : "2x",
      "size" : "512x512"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: Discord/Assets.xcassets/Contents.json
================
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: Discord/Assets.xcassets/Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <!-- Add these keys -->
    <key>NSMicrophoneUsageDescription</key>
    <string>Discord needs access to your microphone for voice chat and calls.</string>
    <key>NSCameraUsageDescription</key>
    <string>Discord needs access to your camera for video chat and calls.</string>
    <key>NSLocationWhenInUseUsageDescription</key>
    <string>Discord needs access to your location for certain features.</string>
    <!-- Rest of your existing Info.plist entries -->
</dict>
</plist>

================
File: Discord/Preview Content/Preview Assets.xcassets/Contents.json
================
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: Discord/ContentView.swift
================
//
//  ContentView.swift
//  Discord
//
//  Created by Austin Thomas on 24/11/2024.
//

import SwiftUI
import AppKit

struct ContentView: View {
    var body: some View {
        DiscordWindowContent(channelClickWidth: 1000)
    }
}

struct DraggableView: NSViewRepresentable {
    func makeNSView(context: Context) -> NSView {
        let view = DragView()
        view.wantsLayer = true
        view.layer?.backgroundColor = .clear
        
        // Ensure the view is above others and can receive mouse events
        view.translatesAutoresizingMaskIntoConstraints = false
        view.layer?.zPosition = 999
        return view
    }
    
    func updateNSView(_ nsView: NSView, context: Context) {}
}

class DragView: NSView {
    override var mouseDownCanMoveWindow: Bool { true }
    
    override var allowsVibrancy: Bool { true }
    
    override func hitTest(_ point: NSPoint) -> NSView? {
        // Check if we're in the dragging gesture
        if let currentEvent = NSApplication.shared.currentEvent,
           currentEvent.type == .leftMouseDown ||
           (currentEvent.type == .leftMouseDragged && NSEvent.pressedMouseButtons == 1) {
            return self
        }
        // Pass through all other events
        return nil
    }
    
    override func mouseDown(with event: NSEvent) {
        window?.performDrag(with: event)
    }
}

struct VisualEffectView: NSViewRepresentable {
    let material: NSVisualEffectView.Material
    let blendingMode: NSVisualEffectView.BlendingMode
    
    func makeNSView(context: Context) -> NSVisualEffectView {
        let visualEffectView = NSVisualEffectView()
        visualEffectView.material = material
        visualEffectView.blendingMode = blendingMode
        return visualEffectView
    }

    func updateNSView(_ visualEffectView: NSVisualEffectView, context: Context) {
        visualEffectView.material = material
        visualEffectView.blendingMode = blendingMode
    }
}

#Preview {
    ContentView()
}

================
File: Discord/Discord.entitlements
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.automation.apple-events</key>
	<true/>
	<key>com.apple.security.cs.allow-dyld-environment-variables</key>
	<true/>
	<key>com.apple.security.cs.allow-jit</key>
	<true/>
	<key>com.apple.security.cs.allow-unsigned-executable-memory</key>
	<true/>
	<key>com.apple.security.device.audio-input</key>
	<true/>
	<key>com.apple.security.device.camera</key>
	<true/>
	<key>com.apple.security.device.microphone</key>
	<true/>
	<key>com.apple.security.device.usb</key>
	<true/>
	<key>com.apple.security.personal-information.photos-library</key>
	<true/>
	<key>com.apple.security.temporary-exception.mach-lookup.global-name</key>
	<array>
		<string>com.apple.WebKit.WebContent</string>
		<string>com.apple.WebKit.WebContent.Development</string>
		<string>com.apple.WebKit.GPU</string>
		<string>com.apple.WebKit.Networking</string>
	</array>
	<key>com.apple.security.temporary-exception.sbpl</key>
	<array>
		<string>(allow mach-lookup (global-name-regex #"^com.apple.WebKit.*))</string>
		<string>(allow mach-lookup (global-name "com.apple.audio.AudioComponentRegistrar"))</string>
	</array>
</dict>
</plist>

================
File: Discord/DiscordApp.swift
================
//
//  DiscordApp.swift
//  Discord
//
//  Created by Austin Thomas on 24/11/2024.
//

import SwiftUI
import AppKit

class WindowDelegate: NSObject, NSWindowDelegate {
    func windowDidResize(_ notification: Notification) {
        repositionTrafficLights(for: notification)
    }
    
    func windowDidEndLiveResize(_ notification: Notification) {
        repositionTrafficLights(for: notification)
    }
    
    func windowDidMove(_ notification: Notification) {
        repositionTrafficLights(for: notification)
    }
    
    func windowDidLayout(_ notification: Notification) {
        repositionTrafficLights(for: notification)
    }
    
    func windowDidBecomeKey(_ notification: Notification) {
        repositionTrafficLights(for: notification)
    }
    
    private func repositionTrafficLights(for notification: Notification) {
        guard let window = notification.object as? NSWindow else { return }
        
        // Ensure traffic lights are repositioned both immediately and after layout
        let repositionBlock = {
            // Make sure buttons are not hidden
            window.standardWindowButton(.closeButton)?.isHidden = false
            window.standardWindowButton(.miniaturizeButton)?.isHidden = false
            window.standardWindowButton(.zoomButton)?.isHidden = false
            
            // Position traffic lights
            window.standardWindowButton(.closeButton)?.setFrameOrigin(NSPoint(x: 10, y: -5))
            window.standardWindowButton(.miniaturizeButton)?.setFrameOrigin(NSPoint(x: 30, y: -5))
            window.standardWindowButton(.zoomButton)?.setFrameOrigin(NSPoint(x: 50, y: -5))
        }
        
        // Execute immediately
        repositionBlock()
        
        // And after a slight delay to catch any animation completions
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            repositionBlock()
        }
    }
}

@main
struct DiscordApp: App {
    @NSApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    
    var body: some Scene {
        WindowGroup {
            ContentView()
                .onAppear {
                    if let window = NSApplication.shared.windows.first {
                        // Set a more standard initial window size
                        let screenFrame = NSScreen.main?.visibleFrame ?? .zero
                        let newWidth: CGFloat = 1000
                        let newHeight: CGFloat = 600
                        
                        // Center the window
                        let centeredX = screenFrame.midX - (newWidth / 2)
                        let centeredY = screenFrame.midY - (newHeight / 2)
                        
                        let initialFrame = NSRect(
                            x: centeredX,
                            y: centeredY,
                            width: newWidth,
                            height: newHeight
                        )
                        
                        window.setFrame(initialFrame, display: true)
                        
                        // Configure window for resizing
                        window.styleMask.insert(.resizable)
                        
                        // Set reasonable min and max sizes
                        window.minSize = NSSize(width: 600, height: 400)
                        window.maxSize = NSSize(width: 2000, height: screenFrame.height)
                        
                        // Disable window frame autosaving
                        window.setFrameAutosaveName("")
                        
                        // Set window delegate for traffic light positioning
                        window.delegate = appDelegate.windowDelegate
                    }
                }
        }
        .windowStyle(.hiddenTitleBar)
        .commands {
            CommandGroup(replacing: .windowArrangement) { }
        }
    }
}

class AppDelegate: NSObject, NSApplicationDelegate {
    let windowDelegate = WindowDelegate()
}

================
File: Discord/DiscordWindowContent.swift
================
import SwiftUI
import WebKit

struct DiscordWindowContent: View {
    var channelClickWidth: CGFloat
    var initialURL: String = "https://discord.com/channels/@me"
    var customCSS: String?
    @State var webViewReference: WKWebView?
    
    var body: some View {
        ZStack(alignment: .topLeading) {
            // Main content spans full window
            ZStack {
                VisualEffectView(material: .sidebar, blendingMode: .behindWindow)
                WebView(channelClickWidth: channelClickWidth,
                        initialURL: initialURL,
                        customCSS: customCSS,
                        webViewReference: $webViewReference)
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
            }
            
            // Make the draggable area smaller so that it doesn't cover the entire top bar
            // Only cover the area around the traffic lights, leaving the rest of the top bar clickable.
            DraggableView()
                .frame(width: 70, height: 48)
        }
        .ignoresSafeArea()
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
}

================
File: Discord/Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDocumentTypes</key>
	<array>
		<dict>
			<key>CFBundleTypeIconSystemGenerated</key>
			<integer>1</integer>
			<key>CFBundleTypeName</key>
			<string>Voxa</string>
			<key>CFBundleTypeRole</key>
			<string>Viewer</string>
			<key>LSHandlerRank</key>
			<string>Default</string>
		</dict>
	</array>
	<key>CFBundleIconFile</key>
	<string></string>
	<key>LSMinimumSystemVersion</key>
	<string>$(MACOSX_DEPLOYMENT_TARGET)</string>
	<key>NSAppTransportSecurity</key>
	<dict>
		<key>NSAllowsArbitraryLoads</key>
		<true/>
	</dict>
</dict>
</plist>

================
File: Discord/SecondaryWindowController.swift
================
import SwiftUI
import AppKit
import WebKit

class SecondaryWindow: NSWindow {
    override func awakeFromNib() {
        super.awakeFromNib()
        positionTrafficLights()
    }
    
    override func setFrame(_ frameRect: NSRect, display flag: Bool, animate animateFlag: Bool) {
        super.setFrame(frameRect, display: flag, animate: animateFlag)
        positionTrafficLights()
    }
    
    override func makeKeyAndOrderFront(_ sender: Any?) {
        super.makeKeyAndOrderFront(sender)
        positionTrafficLights()
    }
    
    override func makeKey() {
        super.makeKey()
        positionTrafficLights()
    }
    
    override func makeMain() {
        super.makeMain()
        positionTrafficLights()
    }
    
    private func positionTrafficLights() {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            // Force layout if needed
            self.layoutIfNeeded()
            
            // Position each button with a slight delay to ensure they're ready
            let buttons: [(NSWindow.ButtonType, CGPoint)] = [
                (.closeButton, NSPoint(x: 10, y: -5)),
                (.miniaturizeButton, NSPoint(x: 30, y: -5)),
                (.zoomButton, NSPoint(x: 50, y: -5))
            ]
            
            for (buttonType, point) in buttons {
                if let button = self.standardWindowButton(buttonType) {
                    button.isHidden = false
                    button.setFrameOrigin(point)
                }
            }
        }
    }
}

class SecondaryWindowController: NSWindowController {
    convenience init(url: String, channelClickWidth: CGFloat) {
        let window = SecondaryWindow(
            contentRect: NSRect(x: 0, y: 0, width: 800, height: 600),
            styleMask: [.titled, .closable, .miniaturizable, .resizable, .fullSizeContentView],
            backing: .buffered,
            defer: false
        )
        
        // Configure window appearance
        window.titlebarAppearsTransparent = true
        window.titleVisibility = .hidden
        window.toolbarStyle = .unifiedCompact
        window.backgroundColor = .clear
        
        // Create custom CSS for secondary windows
        let secondaryCSS = """
        :root {
            --background-accent: rgb(0, 0, 0, 0.5) !important;
            --background-floating: transparent !important;
            --background-message-highlight: transparent !important;
            --background-message-highlight-hover: transparent !important;
            --background-message-hover: transparent !important;
            --background-mobile-primary: transparent !important;
            --background-mobile-secondary: transparent !important;
            --background-modifier-accent: transparent !important;
            --background-modifier-active: transparent !important;
            --background-modifier-hover: transparent !important;
            --background-modifier-selected: transparent !important;
            --background-nested-floating: transparent !important;
            --background-primary: transparent !important;
            --background-secondary: transparent !important;
            --background-secondary-alt: transparent !important;
            --background-tertiary: transparent !important;
            --bg-overlay-3: transparent !important;
            --channeltextarea-background: transparent !important;
        }
        
        /* Hide sidebar and guilds list */
        .sidebar_a4d4d9,
        .guilds_a4d4d9 {
            display: none !important;
        }
        
        /* Add padding to upper container */
        .upperContainer_fc4f04 {
            padding-left: 60px !important;
        }
        
        .theme-dark .themed_fc4f04 {
            background-color: transparent !important;
        }
        
        .channelTextArea_a7d72e {
            background-color: rgb(0, 0, 0, 0.15) !important;
        }
        
        .button_df39bd {
            background-color: rgb(0, 0, 0, 0.15) !important;
        }
        
        .chatContent_a7d72e {
            background-color: transparent !important;
            background: transparent !important;
        }
        
        .chat_a7d72e {
            background: transparent !important;
        }
        
        .content_a7d72e {
            background: none !important;
        }
        
        .container_a6d69a {
            background: transparent !important;
            background-color: transparent !important;
        }
        
        .mainCard_a6d69a {
            background-color: rgb(0, 0, 0, 0.15) !important;
        }
        """
        
        // Create the SwiftUI view for the window with custom CSS
        let contentView = SecondaryWindowView(url: url, channelClickWidth: channelClickWidth, customCSS: secondaryCSS)
        window.contentView = NSHostingView(rootView: contentView)
        
        self.init(window: window)
        
        // Use the shared window delegate from AppDelegate
        if let appDelegate = NSApplication.shared.delegate as? AppDelegate {
            window.delegate = appDelegate.windowDelegate
        }
        
        // Ensure traffic lights are visible
        window.standardWindowButton(.closeButton)?.isHidden = false
        window.standardWindowButton(.miniaturizeButton)?.isHidden = false
        window.standardWindowButton(.zoomButton)?.isHidden = false
    }
}

struct SecondaryWindowView: View {
    let url: String
    let channelClickWidth: CGFloat
    let customCSS: String
    
    var body: some View {
        DiscordWindowContent(channelClickWidth: channelClickWidth,
                           initialURL: url,
                           customCSS: customCSS)
            .frame(minWidth: 200, minHeight: 200)
    }
}

struct SecondaryWindowScene: Scene {
    let url: String
    let channelClickWidth: CGFloat
    
    var body: some Scene {
        WindowGroup {
            SecondaryWindowView(url: url, channelClickWidth: channelClickWidth, customCSS: "")
        }
        .windowStyle(.hiddenTitleBar)
        .windowResizability(.contentSize)
        .defaultPosition(.center)
        .defaultSize(width: 800, height: 600)
    }
}

================
File: Discord/WebView.swift
================
import SwiftUI
@preconcurrency import WebKit

struct WebView: NSViewRepresentable {
    var channelClickWidth: CGFloat
    var initialURL: String
    var customCSS: String?
    @Binding var webViewReference: WKWebView?
    
    // Add default CSS
    private let defaultCSS = """
    :root {
        --background-accent: rgb(0, 0, 0, 0.5) !important;
        --background-floating: transparent !important;
        --background-message-highlight: transparent !important;
        --background-message-highlight-hover: transparent !important;
        --background-message-hover: transparent !important;
        --background-mobile-primary: transparent !important;
        --background-mobile-secondary: transparent !important;
        --background-modifier-accent: transparent !important;
        --background-modifier-active: transparent !important;
        --background-modifier-hover: transparent !important;
        --background-modifier-selected: transparent !important;
        --background-nested-floating: transparent !important;
        --background-primary: transparent !important;
        --background-secondary: transparent !important;
        --background-secondary-alt: transparent !important;
        --background-tertiary: transparent !important;
        --bg-overlay-3: transparent !important;
        --channeltextarea-background: transparent !important;
    }
    
    .sidebar_a4d4d9 {
        background-color: rgb(0, 0, 0, 0.15) !important;
        border-right: solid 1px rgb(0, 0, 0, 0.3) !important;
    }
    
    .guilds_a4d4d9 {
        background-color: rgb(0, 0, 0, 0.3) !important;
        border-right: solid 1px rgb(0, 0, 0, 0.3) !important;
        padding-top: 48px;
    }
    
    .theme-dark .themed_fc4f04 {
        background-color: transparent !important;
    }
    
    .channelTextArea_a7d72e {
        background-color: rgb(0, 0, 0, 0.15) !important;
    }
    
    .button_df39bd {
        background-color: rgb(0, 0, 0, 0.15) !important;
    }
    
    .chatContent_a7d72e {
        background-color: transparent !important;
        background: transparent !important;
    }
    
    .chat_a7d72e {
        background: transparent !important;
    }
    
    .content_a7d72e {
        background: none !important;
    }
    
    .container_eedf95 {
        position: relative;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent layer */
    }

    .container_eedf95::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        backdrop-filter: none; /* In case it gets applied */
        filter: blur(10px); /* Blur effect */
        background-color: inherit; /* Matches container's color */
        z-index: -1; /* Sends the blur behind the content */
    }
    
    .container_a6d69a {
        background: transparent !important;
        background-color: transparent !important;
        backdrop-filter: blur(10px); !important;
    }
    
    .mainCard_a6d69a {
        background-color: rgb(0, 0, 0, 0.15) !important;
    }
    """
    
    init(channelClickWidth: CGFloat, initialURL: String, customCSS: String? = nil) {
        self.channelClickWidth = channelClickWidth
        self.initialURL = initialURL
        self.customCSS = customCSS
        self._webViewReference = .constant(nil)
    }
    
    init(channelClickWidth: CGFloat, initialURL: String, customCSS: String? = nil, webViewReference: Binding<WKWebView?>) {
        self.channelClickWidth = channelClickWidth
        self.initialURL = initialURL
        self.customCSS = customCSS
        self._webViewReference = webViewReference
    }
    
    func makeNSView(context: Context) -> WKWebView {
        // Create configuration with custom user agent and media permissions
        let config = WKWebViewConfiguration()
        config.applicationNameForUserAgent = "Version/17.2.1 Safari/605.1.15"
        
        // Enable media capture
        config.mediaTypesRequiringUserActionForPlayback = []
        config.allowsAirPlayForMediaPlayback = true
        
        // Enable all required permissions
        if #available(macOS 14.0, *) {
            config.preferences.isElementFullscreenEnabled = true
        }
        
        config.preferences.setValue(true, forKey: "mediaDevicesEnabled")
        config.preferences.setValue(true, forKey: "mediaStreamEnabled")
        config.preferences.setValue(true, forKey: "peerConnectionEnabled")
        config.preferences.setValue(true, forKey: "screenCaptureEnabled")
        
        // Create webview with configuration
        let webView = WKWebView(frame: .zero, configuration: config)
        webViewReference = webView
        webView.uiDelegate = context.coordinator
        
        // Make webview background transparent
        webView.setValue(false, forKey: "drawsBackground")
        
        // Configure WKWebView to handle messages from JavaScript
        webView.configuration.userContentController.add(context.coordinator, name: "channelClick")
        
        // Permission script
        let permissionScript = WKUserScript(source: """
            const originalGetUserMedia = navigator.mediaDevices.getUserMedia;
            navigator.mediaDevices.getUserMedia = async function(constraints) {
                console.log('getUserMedia requested with constraints:', constraints);
                return originalGetUserMedia.call(navigator.mediaDevices, constraints);
            };
            
            const originalEnumerateDevices = navigator.mediaDevices.enumerateDevices;
            navigator.mediaDevices.enumerateDevices = async function() {
                console.log('enumerateDevices requested');
                return originalEnumerateDevices.call(navigator.mediaDevices);
            };
        """, injectionTime: .atDocumentEnd, forMainFrameOnly: true)
        webView.configuration.userContentController.addUserScript(permissionScript)
        
        // Channel click monitoring script
        let channelClickScript = WKUserScript(source: """
            function attachClickListener() {
                document.addEventListener('click', function(e) {
                    // Check for channel click
                    const channel = e.target.closest('.blobContainer_a5ad63');
                    if (channel) {
                        window.webkit.messageHandlers.channelClick.postMessage({type: 'channel'});
                        return;
                    }
                    
                    // Check for link click (e.g., DMs)
                    const link = e.target.closest('.link_c91bad');
                    if (link) {
                        e.preventDefault();
                        let href = link.getAttribute('href') || link.href || '/channels/@me';
                        if (href.startsWith('/')) {
                            href = 'https://discord.com' + href;
                        }
                        console.log('Link clicked with href:', href);
                        window.webkit.messageHandlers.channelClick.postMessage({type: 'user', url: href});
                        return;
                    }
                    
                    // Check for server icon click
                    const serverIcon = e.target.closest('.wrapper_f90abb');
                    if (serverIcon) {
                        window.webkit.messageHandlers.channelClick.postMessage({type: 'server'});
                    }
                });
            }
            attachClickListener();
        """, injectionTime: .atDocumentEnd, forMainFrameOnly: true)
        
        webView.configuration.userContentController.addUserScript(channelClickScript)
        
        // Use custom CSS if provided, otherwise use default CSS
        let cssToUse = customCSS ?? defaultCSS
        let initialScript = WKUserScript(source: """
            const style = document.createElement('style');
            style.textContent = `\(cssToUse)`;
            document.head.appendChild(style);
        """, injectionTime: .atDocumentEnd, forMainFrameOnly: true)
        
        webView.configuration.userContentController.addUserScript(initialScript)
        
        // Load Discord
        let url = URL(string: initialURL)!
        let request = URLRequest(url: url)
        webView.load(request)
        
        return webView
    }
    
    func updateNSView(_ nsView: WKWebView, context: Context) {}
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, WKScriptMessageHandler, WKUIDelegate {
        var parent: WebView
        
        init(_ parent: WebView) {
            self.parent = parent
        }
        
        @available(macOS 12.0, *)
        func webView(_ webView: WKWebView,
                     requestMediaCapturePermissionFor origin: WKSecurityOrigin,
                     initiatedByFrame frame: WKFrameInfo,
                     type: WKMediaCaptureType,
                     decisionHandler: @escaping (WKPermissionDecision) -> Void) {
            print("Requesting permission for media type:", type)
            decisionHandler(.grant)
        }
        
        func webView(_ webView: WKWebView,
                     runOpenPanelWith parameters: WKOpenPanelParameters,
                     initiatedByFrame frame: WKFrameInfo,
                     completionHandler: @escaping ([URL]?) -> Void) {
            completionHandler(nil)
        }
        
        func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
            guard let messageDict = message.body as? [String: Any],
                  let type = messageDict["type"] as? String else { return }
            
            switch type {
            case "server":
                // No window resizing; just load in place if needed.
                // The server panel is already part of the current UI, so do nothing.
                break
                
            case "channel":
                // Load channel in the same window if needed.
                // Channels are also already within the main UI context.
                break
                
            case "user":
                if let urlString = messageDict["url"] as? String, let url = URL(string: urlString) {
                    // Instead of opening a new window, just load the URL in the main webView
                    parent.webViewReference?.load(URLRequest(url: url))
                }
                
            default:
                break
            }
        }
    }
}

================
File: Discord.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict/>
</plist>

================
File: Discord.xcodeproj/project.xcworkspace/xcuserdata/austin.xcuserdatad/IDEFindNavigatorScopes.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array/>
</plist>

================
File: Discord.xcodeproj/project.xcworkspace/xcuserdata/nicojaffer.xcuserdatad/WorkspaceSettings.xcsettings
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BuildLocationStyle</key>
	<string>UseAppPreferences</string>
	<key>CustomBuildLocationType</key>
	<string>RelativeToDerivedData</string>
	<key>DerivedDataLocationStyle</key>
	<string>Default</string>
	<key>ShowSharedSchemesAutomaticallyEnabled</key>
	<true/>
</dict>
</plist>

================
File: Discord.xcodeproj/project.xcworkspace/contents.xcworkspacedata
================
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>

================
File: Discord.xcodeproj/xcshareddata/xcschemes/Discord.xcscheme
================
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1600"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES"
      buildArchitectures = "Automatic">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "D910A0842CF2B6F8005F6119"
               BuildableName = "Discord.app"
               BlueprintName = "Discord"
               ReferencedContainer = "container:Discord.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES"
      shouldAutocreateTestPlan = "YES">
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "D910A0842CF2B6F8005F6119"
            BuildableName = "Discord.app"
            BlueprintName = "Discord"
            ReferencedContainer = "container:Discord.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
      <AdditionalOptions>
         <AdditionalOption
            key = "APP_DISTRIBUTOR_ID_OVERRIDE"
            value = "com.apple.TestFlight"
            isEnabled = "YES">
         </AdditionalOption>
      </AdditionalOptions>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <PathRunnable
         runnableDebuggingMode = "0"
         FilePath = "/Users/nicojaffer/Library/Developer/Xcode/DerivedData/Discord-fejjyndhtdsmquhjurkmvsmsmgpa/Build/Products/Debug/voxa.app">
      </PathRunnable>
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "D910A0842CF2B6F8005F6119"
            BuildableName = "Discord.app"
            BlueprintName = "Discord"
            ReferencedContainer = "container:Discord.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>

================
File: Discord.xcodeproj/xcuserdata/austin.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist
================
<?xml version="1.0" encoding="UTF-8"?>
<Bucket
   uuid = "B601B954-DB2F-4B4D-86E5-9734DB04C66C"
   type = "1"
   version = "2.0">
</Bucket>

================
File: Discord.xcodeproj/xcuserdata/austin.xcuserdatad/xcschemes/xcschememanagement.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>SchemeUserState</key>
	<dict>
		<key>Discord.xcscheme_^#shared#^_</key>
		<dict>
			<key>orderHint</key>
			<integer>0</integer>
		</dict>
	</dict>
</dict>
</plist>

================
File: Discord.xcodeproj/xcuserdata/nicojaffer.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist
================
<?xml version="1.0" encoding="UTF-8"?>
<Bucket
   uuid = "E1ADC216-6B74-443B-97CD-34A01E871A81"
   type = "1"
   version = "2.0">
</Bucket>

================
File: Discord.xcodeproj/xcuserdata/nicojaffer.xcuserdatad/xcschemes/xcschememanagement.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>SchemeUserState</key>
	<dict>
		<key>Discord.xcscheme_^#shared#^_</key>
		<dict>
			<key>orderHint</key>
			<integer>0</integer>
		</dict>
	</dict>
	<key>SuppressBuildableAutocreation</key>
	<dict>
		<key>D910A0842CF2B6F8005F6119</key>
		<dict>
			<key>primary</key>
			<true/>
		</dict>
	</dict>
</dict>
</plist>

================
File: Discord.xcodeproj/project.pbxproj
================
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 77;
	objects = {

/* Begin PBXFileReference section */
		D910A0852CF2B6F8005F6119 /* Discord.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Discord.app; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFileSystemSynchronizedRootGroup section */
		D910A0872CF2B6F8005F6119 /* Discord */ = {
			isa = PBXFileSystemSynchronizedRootGroup;
			path = Discord;
			sourceTree = "<group>";
		};
/* End PBXFileSystemSynchronizedRootGroup section */

/* Begin PBXFrameworksBuildPhase section */
		D910A0822CF2B6F8005F6119 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		D910A07C2CF2B6F8005F6119 = {
			isa = PBXGroup;
			children = (
				D910A0872CF2B6F8005F6119 /* Discord */,
				D910A0862CF2B6F8005F6119 /* Products */,
			);
			sourceTree = "<group>";
		};
		D910A0862CF2B6F8005F6119 /* Products */ = {
			isa = PBXGroup;
			children = (
				D910A0852CF2B6F8005F6119 /* Discord.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		D910A0842CF2B6F8005F6119 /* Discord */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = D910A0942CF2B6FA005F6119 /* Build configuration list for PBXNativeTarget "Discord" */;
			buildPhases = (
				D910A0812CF2B6F8005F6119 /* Sources */,
				D910A0822CF2B6F8005F6119 /* Frameworks */,
				D910A0832CF2B6F8005F6119 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			fileSystemSynchronizedGroups = (
				D910A0872CF2B6F8005F6119 /* Discord */,
			);
			name = Discord;
			packageProductDependencies = (
			);
			productName = Discord;
			productReference = D910A0852CF2B6F8005F6119 /* Discord.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		D910A07D2CF2B6F8005F6119 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastSwiftUpdateCheck = 1610;
				LastUpgradeCheck = 1610;
				TargetAttributes = {
					D910A0842CF2B6F8005F6119 = {
						CreatedOnToolsVersion = 16.1;
					};
				};
			};
			buildConfigurationList = D910A0802CF2B6F8005F6119 /* Build configuration list for PBXProject "Discord" */;
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = D910A07C2CF2B6F8005F6119;
			minimizedProjectReferenceProxies = 1;
			preferredProjectObjectVersion = 77;
			productRefGroup = D910A0862CF2B6F8005F6119 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				D910A0842CF2B6F8005F6119 /* Discord */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		D910A0832CF2B6F8005F6119 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		D910A0812CF2B6F8005F6119 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		D910A0922CF2B6FA005F6119 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				GENERATE_INFOPLIST_FILE = NO;
				INFOPLIST_FILE = Discord/Info.plist;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MACOSX_DEPLOYMENT_TARGET = 15.1;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "DEBUG $(inherited)";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		D910A0932CF2B6FA005F6119 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				GENERATE_INFOPLIST_FILE = NO;
				INFOPLIST_FILE = Discord/Info.plist;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MACOSX_DEPLOYMENT_TARGET = 15.1;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
			};
			name = Release;
		};
		D910A0952CF2B6FA005F6119 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS = YES;
				CODE_SIGN_ENTITLEMENTS = Discord/Discord.entitlements;
				"CODE_SIGN_IDENTITY[sdk=macosx*]" = "Apple Development";
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_ASSET_PATHS = "\"Discord/Preview Content\"";
				DEVELOPMENT_TEAM = 7BRPLLH5D4;
				ENABLE_HARDENED_RUNTIME = YES;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_KEY_CFBundleDisplayName = Voxa;
				INFOPLIST_KEY_LSApplicationCategoryType = "public.app-category.social-networking";
				INFOPLIST_KEY_NSCameraUsageDescription = "Need camera access for uploading images";
				INFOPLIST_KEY_NSHumanReadableCopyright = "";
				INFOPLIST_KEY_NSLocationUsageDescription = "Need location access for updating nearby friends";
				INFOPLIST_KEY_NSLocationWhenInUseUsageDescription = "This app will use your location to show features near you.";
				INFOPLIST_KEY_NSMicrophoneUsageDescription = "Need microphone access for uploading audio";
				INFOPLIST_KEY_NSPhotoLibraryUsageDescription = "Need photo library access for saving and uploading images";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				MACOSX_DEPLOYMENT_TARGET = 15.1;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = lol.peril.voxa;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		D910A0962CF2B6FA005F6119 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS = YES;
				CODE_SIGN_ENTITLEMENTS = Discord/Discord.entitlements;
				"CODE_SIGN_IDENTITY[sdk=macosx*]" = "Apple Development";
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_ASSET_PATHS = "\"Discord/Preview Content\"";
				DEVELOPMENT_TEAM = 7BRPLLH5D4;
				ENABLE_HARDENED_RUNTIME = YES;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_KEY_CFBundleDisplayName = Voxa;
				INFOPLIST_KEY_LSApplicationCategoryType = "public.app-category.social-networking";
				INFOPLIST_KEY_NSCameraUsageDescription = "Need camera access for uploading images";
				INFOPLIST_KEY_NSHumanReadableCopyright = "";
				INFOPLIST_KEY_NSLocationUsageDescription = "Need location access for updating nearby friends";
				INFOPLIST_KEY_NSLocationWhenInUseUsageDescription = "This app will use your location to show features near you.";
				INFOPLIST_KEY_NSMicrophoneUsageDescription = "Need microphone access for uploading audio";
				INFOPLIST_KEY_NSPhotoLibraryUsageDescription = "Need photo library access for saving and uploading images";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				MACOSX_DEPLOYMENT_TARGET = 15.1;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = lol.peril.voxa;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		D910A0802CF2B6F8005F6119 /* Build configuration list for PBXProject "Discord" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				D910A0922CF2B6FA005F6119 /* Debug */,
				D910A0932CF2B6FA005F6119 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		D910A0942CF2B6FA005F6119 /* Build configuration list for PBXNativeTarget "Discord" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				D910A0952CF2B6FA005F6119 /* Debug */,
				D910A0962CF2B6FA005F6119 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = D910A07D2CF2B6F8005F6119 /* Project object */;
}

================
File: Discord.entitlements
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.security.device.camera</key>
    <true/>
    <key>com.apple.security.device.microphone</key>
    <true/>
    <key>com.apple.security.device.audio-input</key>
    <true/>
    <key>com.apple.security.device.usb</key>
    <true/>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.allow-dyld-environment-variables</key>
    <true/>
    <key>com.apple.security.temporary-exception.mach-lookup.global-name</key>
    <array>
        <string>com.apple.WebKit.WebContent</string>
        <string>com.apple.WebKit.WebContent.Development</string>
        <string>com.apple.WebKit.GPU</string>
        <string>com.apple.WebKit.Networking</string>
    </array>
    <key>com.apple.security.temporary-exception.sbpl</key>
    <array>
        <string>(allow mach-lookup (global-name-regex #"^com.apple.WebKit.*))</string>
        <string>(allow mach-lookup (global-name "com.apple.audio.AudioComponentRegistrar"))</string>
    </array>
    <key>com.apple.security.automation.apple-events</key>
    <true/>
</dict>
</plist>

================
File: FUNDING.yml
================
ko_fi: plyght
buy_me_a_coffee: plyght
thanks_dev: # Replace with a single thanks.dev username

================
File: Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>NSMicrophoneUsageDescription</key>
    <string>Discord needs access to your microphone for voice chat and calls.</string>
    <key>NSCameraUsageDescription</key>
    <string>Discord needs access to your camera for video chat and calls.</string>
    <key>NSLocationWhenInUseUsageDescription</key>
    <string>Discord needs access to your location for certain features.</string>
    <key>CFBundleDocumentTypes</key>
    <array>
        <dict>
            <key>CFBundleTypeName</key>
            <string>Discord</string>
            <key>LSHandlerRank</key>
            <string>Default</string>
        </dict>
    </array>
    <key>CFBundleExecutable</key>
    <string>$(EXECUTABLE_NAME)</string>
    <key>CFBundleIconFile</key>
    <string></string>
    <key>CFBundleIdentifier</key>
    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>$(PRODUCT_NAME)</string>
    <key>CFBundlePackageType</key>
    <string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>CFBundleVersion</key>
    <string>1</string>
    <key>LSMinimumSystemVersion</key>
    <string>$(MACOSX_DEPLOYMENT_TARGET)</string>
    <key>NSAppTransportSecurity</key>
    <dict>
        <key>NSAllowsArbitraryLoads</key>
        <true/>
    </dict>
    <key>LSApplicationCategoryType</key>
    <string>public.app-category.social-networking</string>
</dict>
</plist>

================
File: README.md
================
# Voxa
A sleek, native macOS Discord client built with SwiftUI. Fast, lightweight, and designed for seamless communication.
